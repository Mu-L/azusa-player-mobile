diff --git a/node_modules/react-native-flashdrag-list/src/FlashDragList.tsx b/node_modules/react-native-flashdrag-list/src/FlashDragList.tsx
index e61b462..757b6a7 100644
--- a/node_modules/react-native-flashdrag-list/src/FlashDragList.tsx
+++ b/node_modules/react-native-flashdrag-list/src/FlashDragList.tsx
@@ -23,7 +23,6 @@ import Animated, {
 } from 'react-native-reanimated';
 import ItemWrapper from './ItemWrapper';
 
-// const GestureFlashList = createNativeWrapper(FlashList);
 const AnimatedFlashList = Animated.createAnimatedComponent(FlashList);
 
 type Props = Omit<FlashListProps<any>, 'renderItem'> & {
@@ -80,49 +79,49 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
   const panScroll = useSharedValue(0);
   const panOffset = useSharedValue(0);
 
+  const zoomOnActive = useSharedValue(1);
+
+  
   const endDrag = (fromIndex: number, toIndex: number) => {
-    const endAnimationDuration = 300
-    panAbs.value = withTiming((toIndex * itemsSize) + (itemsSize / 2) - scroll.value, {
-      duration: endAnimationDuration
-    })
-    setTimeout(() => {
-      const changed = fromIndex !== toIndex;
-      avoidDataUpdate.current = true;
-      if (changed) {
-        const copy = [...data];
-        const removed = copy.splice(fromIndex, 1);
-        copy.splice(toIndex, 0, removed[0]);
-        setData(copy);
-      }
-      panOffset.value = 0;
-      panAbs.value = -1;
-      panScroll.value = 0;
-      activeIndex.value = -1;
-      setActiveIndexState(-1);
-      insertIndex.value = -1;
-      autoScrollSpeed.value = 0;
-      autoScrollAcc.value = 1;
-      setActive(false);
-      fromIndexRef.current = fromIndex;
-      toIndexRef.current = toIndex;
-      if(changed) {
-        setCallOnSort(true);
-      }
-    }, endAnimationDuration + 1)
+    const changed = fromIndex !== toIndex;
+    avoidDataUpdate.current = true;
+    if (changed) {
+      const copy = [...data];
+      const removed = copy.splice(fromIndex, 1);
+      copy.splice(toIndex, 0, removed[0]);
+      setData(copy);
+    }
+    panOffset.value = 0;
+    panScroll.value = 0;
+    //panAbs.value = -1;
+    //activeIndex.value = -1;
+    setActiveIndexState(-1);
+    //insertIndex.value = -1;
+    autoScrollSpeed.value = 0;
+    autoScrollAcc.value = 1;
+    setActive(false);
+    fromIndexRef.current = fromIndex;
+    toIndexRef.current = toIndex;
+    zoomOnActive.value = withTiming(1);
+    if (changed) {
+      setCallOnSort(true);
+    }
   };
   
   useEffect(() => {
-    if(!callOnSort || fromIndexRef.current < 0 || toIndexRef.current < 0)
+    if (!callOnSort || fromIndexRef.current < 0 || toIndexRef.current < 0)
       return
     avoidDataUpdate.current = false;
     props.onSort?.(fromIndexRef.current, toIndexRef.current);
     setCallOnSort(false);
+    insertIndex.value = -1;
   }, [callOnSort])
 
   const beginDrag = useCallback((index: number) => {
     activeIndex.value = index;
     setActiveIndexState(index);
     setActive(true);
+    // zoomOnActive.value = withTiming(1.1);
   }, []);
 
   useEffect(() => {
@@ -134,11 +133,11 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
             offset:
               scroll.value +
               autoScrollSpeed.value *
-                (props.autoScrollSpeed ?? 1) *
-                autoScrollAcc.value,
+              (props.autoScrollSpeed ?? 1) *
+              autoScrollAcc.value,
             animated: false,
           });
-          autoScrollAcc.value = Math.min(6, autoScrollAcc.value + 0.01);
+          autoScrollAcc.value = Math.min(6, autoScrollAcc.value + 0.1);
         }, 16);
       }
     } else {
@@ -161,6 +160,7 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
     .manualActivation(isIOS)
     .enabled(layout !== null)
     .shouldCancelWhenOutside(false)
+    .onTouchesCancelled(() => runOnJS(setActive)(false))
     .onTouchesMove((_evt, stateManager) => {
       if (!isIOS) return;
       if (active || activeIndexState >= 0 || activeIndex.value >= 0)
@@ -212,8 +212,9 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
   const extraData = useMemo(
     () => ({
       active,
+      ...Object.assign({}, extraData)
     }),
-    [active]
+    [active, ...props.extraData]
   );
 
   const renderItem = ({ item, index }: any) => {
@@ -239,6 +240,7 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
         {
           translateY: panAbs.value - itemsSize / 2,
         },
+        { scale: zoomOnActive.value }
       ],
     };
   }, [itemsSize]);
@@ -290,7 +292,7 @@ const FlashDragList: FunctionComponent<Props> = (props) => {
               data[Math.max(0, activeIndexState)],
               Math.max(0, activeIndexState),
               true,
-              () => {}
+              () => { }
             )}
           </Animated.View>
         )}
diff --git a/node_modules/react-native-flashdrag-list/src/ItemWrapper.tsx b/node_modules/react-native-flashdrag-list/src/ItemWrapper.tsx
index ceede04..ae4d9ef 100644
--- a/node_modules/react-native-flashdrag-list/src/ItemWrapper.tsx
+++ b/node_modules/react-native-flashdrag-list/src/ItemWrapper.tsx
@@ -27,7 +27,7 @@ const ItemWrapper = forwardRef<any, Props>((props, ref) => {
 
   useEffect(() => {
     if(!active && position.value !== 0)
-      position.value = withSpring(0)
+      position.value = 0
   }, [active])
 
   useAnimatedReaction(() => {
